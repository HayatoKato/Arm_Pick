# generated from rosidl_generator_py/resource/_idl.py.em
# with input from aruco_interface:srv/ArucoCommand.idl
# generated code does not contain a copyright notice


# Import statements for member types

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_ArucoCommand_Request(type):
    """Metaclass of message 'ArucoCommand_Request'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('aruco_interface')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'aruco_interface.srv.ArucoCommand_Request')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__srv__aruco_command__request
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__srv__aruco_command__request
            cls._CONVERT_TO_PY = module.convert_to_py_msg__srv__aruco_command__request
            cls._TYPE_SUPPORT = module.type_support_msg__srv__aruco_command__request
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__srv__aruco_command__request

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class ArucoCommand_Request(metaclass=Metaclass_ArucoCommand_Request):
    """Message class 'ArucoCommand_Request'."""

    __slots__ = [
        '_command',
    ]

    _fields_and_field_types = {
        'command': 'string',
    }

    SLOT_TYPES = (
        rosidl_parser.definition.UnboundedString(),  # noqa: E501
    )

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        self.command = kwargs.get('command', str())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.__slots__, self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s[1:] + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.command != other.command:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @property
    def command(self):
        """Message field 'command'."""
        return self._command

    @command.setter
    def command(self, value):
        if __debug__:
            assert \
                isinstance(value, str), \
                "The 'command' field must be of type 'str'"
        self._command = value


# Import statements for member types

# already imported above
# import rosidl_parser.definition


class Metaclass_ArucoCommand_Response(type):
    """Metaclass of message 'ArucoCommand_Response'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('aruco_interface')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'aruco_interface.srv.ArucoCommand_Response')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__srv__aruco_command__response
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__srv__aruco_command__response
            cls._CONVERT_TO_PY = module.convert_to_py_msg__srv__aruco_command__response
            cls._TYPE_SUPPORT = module.type_support_msg__srv__aruco_command__response
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__srv__aruco_command__response

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class ArucoCommand_Response(metaclass=Metaclass_ArucoCommand_Response):
    """Message class 'ArucoCommand_Response'."""

    __slots__ = [
        '_ar0x',
        '_ar0y',
        '_ar1x',
        '_ar1y',
        '_ar2x',
        '_ar2y',
        '_ar3x',
        '_ar3y',
    ]

    _fields_and_field_types = {
        'ar0x': 'int32',
        'ar0y': 'int32',
        'ar1x': 'int32',
        'ar1y': 'int32',
        'ar2x': 'int32',
        'ar2y': 'int32',
        'ar3x': 'int32',
        'ar3y': 'int32',
    }

    SLOT_TYPES = (
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
    )

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        self.ar0x = kwargs.get('ar0x', int())
        self.ar0y = kwargs.get('ar0y', int())
        self.ar1x = kwargs.get('ar1x', int())
        self.ar1y = kwargs.get('ar1y', int())
        self.ar2x = kwargs.get('ar2x', int())
        self.ar2y = kwargs.get('ar2y', int())
        self.ar3x = kwargs.get('ar3x', int())
        self.ar3y = kwargs.get('ar3y', int())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.__slots__, self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s[1:] + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.ar0x != other.ar0x:
            return False
        if self.ar0y != other.ar0y:
            return False
        if self.ar1x != other.ar1x:
            return False
        if self.ar1y != other.ar1y:
            return False
        if self.ar2x != other.ar2x:
            return False
        if self.ar2y != other.ar2y:
            return False
        if self.ar3x != other.ar3x:
            return False
        if self.ar3y != other.ar3y:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @property
    def ar0x(self):
        """Message field 'ar0x'."""
        return self._ar0x

    @ar0x.setter
    def ar0x(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'ar0x' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'ar0x' field must be an integer in [-2147483648, 2147483647]"
        self._ar0x = value

    @property
    def ar0y(self):
        """Message field 'ar0y'."""
        return self._ar0y

    @ar0y.setter
    def ar0y(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'ar0y' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'ar0y' field must be an integer in [-2147483648, 2147483647]"
        self._ar0y = value

    @property
    def ar1x(self):
        """Message field 'ar1x'."""
        return self._ar1x

    @ar1x.setter
    def ar1x(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'ar1x' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'ar1x' field must be an integer in [-2147483648, 2147483647]"
        self._ar1x = value

    @property
    def ar1y(self):
        """Message field 'ar1y'."""
        return self._ar1y

    @ar1y.setter
    def ar1y(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'ar1y' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'ar1y' field must be an integer in [-2147483648, 2147483647]"
        self._ar1y = value

    @property
    def ar2x(self):
        """Message field 'ar2x'."""
        return self._ar2x

    @ar2x.setter
    def ar2x(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'ar2x' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'ar2x' field must be an integer in [-2147483648, 2147483647]"
        self._ar2x = value

    @property
    def ar2y(self):
        """Message field 'ar2y'."""
        return self._ar2y

    @ar2y.setter
    def ar2y(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'ar2y' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'ar2y' field must be an integer in [-2147483648, 2147483647]"
        self._ar2y = value

    @property
    def ar3x(self):
        """Message field 'ar3x'."""
        return self._ar3x

    @ar3x.setter
    def ar3x(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'ar3x' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'ar3x' field must be an integer in [-2147483648, 2147483647]"
        self._ar3x = value

    @property
    def ar3y(self):
        """Message field 'ar3y'."""
        return self._ar3y

    @ar3y.setter
    def ar3y(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'ar3y' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'ar3y' field must be an integer in [-2147483648, 2147483647]"
        self._ar3y = value


class Metaclass_ArucoCommand(type):
    """Metaclass of service 'ArucoCommand'."""

    _TYPE_SUPPORT = None

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('aruco_interface')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'aruco_interface.srv.ArucoCommand')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._TYPE_SUPPORT = module.type_support_srv__srv__aruco_command

            from aruco_interface.srv import _aruco_command
            if _aruco_command.Metaclass_ArucoCommand_Request._TYPE_SUPPORT is None:
                _aruco_command.Metaclass_ArucoCommand_Request.__import_type_support__()
            if _aruco_command.Metaclass_ArucoCommand_Response._TYPE_SUPPORT is None:
                _aruco_command.Metaclass_ArucoCommand_Response.__import_type_support__()


class ArucoCommand(metaclass=Metaclass_ArucoCommand):
    from aruco_interface.srv._aruco_command import ArucoCommand_Request as Request
    from aruco_interface.srv._aruco_command import ArucoCommand_Response as Response

    def __init__(self):
        raise NotImplementedError('Service classes can not be instantiated')
