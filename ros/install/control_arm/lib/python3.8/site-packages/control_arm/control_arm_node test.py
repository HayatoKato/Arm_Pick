import sys
import time
import threading
import numpy as np

import rclpy
from rclpy.node import Node
from rclpy.duration import Duration
from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint


from control_arm.kinematics import inverse_kinematics

# ARMパラメーター
DT = 2
GRIPPER_OPEN = 0
GRIPPER_CLOSE = 1


class ControlArm(Node):
    def __init__(self):
        super().__init__("control_arm_node_test")
        self.joint_names = [
            "crane_plus_joint1",
            "crane_plus_joint2",
            "crane_plus_joint3",
            "crane_plus_joint4"
        ]
        self.crane_name = ["crane_plus_joint_hand"]

        self.publisher_joint = self.create_publisher(
            JointTrajectory,
            "crane_plus_arm_controller/joint_trajectory",
            10
        )
        self.publisher_gripper = self.create_publisher(
            JointTrajectory,
            "crane_plus_gripper_controller/joint_trajectory",
            10
        )

    def publish_joint(self, q, time):
        msg = JointTrajectory()
        msg.header.stamp = self.get_clock().now().to_msg()
        msg.joint_names = self.joint_names
        msg.points = [JointTrajectoryPoint()]
        msg.points[0].positions = [
            float(q[0]), float(q[1]), float(q[2]), float(q[3])
        ]
        msg.points[0].time_from_start = Duration(
            seconds=int(time),
            nanoseconds=(time-int(time))*1e9
        ).to_msg()
        self.publisher_joint.publish(msg)

    def publish_gripper(self, gripper, time):
        msg = JointTrajectory()
        msg.header.stamp = self.get_clock().now().to_msg()
        msg.joint_names = ['crane_plus_joint_hand']
        msg.points = [JointTrajectoryPoint()]
        msg.points[0].positions = [float(gripper)]
        msg.points[0].time_from_start = Duration(
            seconds=int(time),
            nanoseconds=(time-int(time))*1e9
        ).to_msg()
        self.publisher_gripper.publish(msg)


def move_initial_position(node):
    joint = [0.0, 0.0, 0.0, 0.0]
    node.publish_joint(joint, DT)
    node.publish_gripper(GRIPPER_OPEN, DT)
    time.sleep(DT)
    
def main():

    # コマンドライン引数
    args = sys.argv
    x, y, z = float(args[1]), float(args[2]), 0.08     # x, y, z, pitch = 0.19544907564865233, 0.01961031891461195, 0.060, 0.17

    # ros2ノード実行
    rclpy.init()
    control_arm_node = ControlArm()
    thread = threading.Thread(target=rclpy.spin, args=(control_arm_node,))
    thread.start()
    time.sleep(1)

    # Arm初期位置設定
    move_initial_position(control_arm_node)

    # 逆運動学
    elbow_up = True
    for pitch in np.linspace(0, 2*np.pi, 1000):
        joint = inverse_kinematics([x, y, z, pitch], elbow_up)
        if joint is not None:
            print(pitch)
            break
    if joint is None:
        rclpy.shutdown()
    else:
        print("none")
        control_arm_node.publish_joint(joint, DT)
        control_arm_node.publish_gripper(GRIPPER_OPEN, DT)
        rclpy.shutdown()
